#lang racket/base

;; Usage:
;;   racket make-scatterplot.rkt OUTPUT.txt
;; where OUTPUT.txt was generated by the `zrun` script

(require
  plot/no-gui
  math/statistics
  file/glob
  racket/string
  racket/match
  racket/format
)

;; =============================================================================

(define *OUTPUT-FILE* (make-parameter "output.png"))
(define *PLOT-TYPE* (make-parameter 'point))

(define (plot-proc)
  (define pt (*PLOT-TYPE*))
  (case pt
   [(point) points]
   [(hist) discrete-histogram]
   [else (raise-user-error 'make-scatterplot "Unknown plot type '~a'" pt)]))

;; Convert a string like '[0.14698418600000007, 0.14525612899999985, 0.1445905839999999]'
;;  to a list of numbers
(define (parse-sec seconds-str)
  (for/list ([str (string-split (substring seconds-str 1 (- (string-length seconds-str) 1)) ", ")]
             #:when (not (string=? "" str)))
    (string->number str)))

;; Round a number
(define (rnd n)
  (~r (* 100 n) #:precision '(= 4)))

(module+ main
  (require racket/cmdline)
  (command-line
   #:program "make-scatterplot"
   #:once-each
   [("-t" "--type" "--plot-type") pt "Control plot type (point, hist)" (*PLOT-TYPE* (string->symbol pt))]
   [("-o" "--output") of "Set output destination" (*OUTPUT-FILE* of)]
   #:args (fname)
    (define type+avg*
      (let ([acc (make-hash)])
        (with-input-from-file fname
          (lambda ()
            (for ([ln (in-lines)])
              (match-define (list cfg num-types-str sec-str) (string-split ln "    "))
              (define num-types (string->number num-types-str))
              (define sec (mean (parse-sec sec-str)))
              (define old* (hash-ref acc num-types '()))
              (hash-set! acc num-types (cons sec old*)))))
        (for/fold ([acc '()])
                  ([(k v*) (in-hash acc)])
          (append (for/list ([v (in-list v*)]) (list k v)) acc))))
    (define out (*OUTPUT-FILE*))
    (parameterize ([point-x-jitter 0.3]
                   [point-sym 'dot])
      (plot-file
        ((plot-proc) type+avg*
                     #:y-min 0)
        out
        #:width 1200
        #:x-label "Num. Types"
        #:y-label "Time (sec)"))
    (printf "Saved plot to '~a'\n" out)
))
